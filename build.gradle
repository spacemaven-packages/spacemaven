import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id 'application'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.21'
    id 'io.ktor.plugin' version '3.2.2'
    id 'gg.jte.gradle' version '3.2.1'
}

application {
    mainClass = 'net.derfruhling.spacemaven.ApplicationKt'
    applicationDefaultJvmArgs = [
            "--enable-native-access=ALL-UNNAMED",
            "-Xms512M",
            "-Xmx512M",
            "-Dotel.java.global-autoconfigure.enabled=true",
            "-Dotel.instrumentation.common.db-statement-sanitizer.enabled=true"
    ]
}

repositories {
    mavenCentral()
}

configurations {
    development {

    }

    if(!project.hasProperty("spm.buildingFromDockerImage")) {
        implementation.extendsFrom(development)
    } else {
        compileOnly.extendsFrom(development)
    }
}

dependencies {
    implementation platform('com.google.cloud:libraries-bom:26.61.0')
    implementation platform('org.apache.logging.log4j:log4j-bom:2.25.1')
    implementation platform('io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.18.1')

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.21'
    implementation 'io.ktor:ktor-server-core'
    implementation 'io.ktor:ktor-server-auth'
    implementation 'io.ktor:ktor-server-netty'
    implementation 'io.ktor:ktor-server-content-negotiation'
    implementation 'io.ktor:ktor-serialization-kotlinx-json'
    implementation 'io.ktor:ktor-serialization-kotlinx-cbor'
    implementation 'io.ktor:ktor-serialization-kotlinx-xml'
    implementation 'io.ktor:ktor-server-jte'
    implementation 'io.github.oshai:kotlin-logging:7.0.3'

    implementation 'com.google.cloud:google-cloud-datastore:2.31.0'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-ktor-3.0:2.18.1-alpha'

    implementation 'ch.qos.logback:logback-core:1.5.18'
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'net.logstash.logback:logstash-logback-encoder:8.1'

    implementation 'io.opentelemetry:opentelemetry-sdk'
    implementation 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:2.18.1'
    runtimeOnly 'io.opentelemetry.contrib:opentelemetry-gcp-resources:1.48.0-alpha'

    development 'gg.jte:jte-kotlin:3.2.1'

    testImplementation 'io.ktor:ktor-server-test-host'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5:2.1.21'
}

jte {
    generate()

    sourceDirectory = file('src/main/resources/templates').toPath()
}

/*
 * this is actually built with jvm 24, but 24 is so new that kotlin doesn't
 * know about it yet, so we'll have to settle with 23
 */
java {
    targetCompatibility = JavaVersion.VERSION_23
    sourceCompatibility = JavaVersion.VERSION_23
}

kotlin {
    target {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_23
        }
    }
}

if(project.hasProperty("spm.buildingFromDockerImage")) {
    /*processResources {
        exclude 'log4j2.xml'
        rename("log4j2-prod.xml", "log4j2.xml")
    }*/

    kotlin.target.compilations.main.getCompileTaskProvider().configure {
        dependsOn('generateJte')
    }

    kotlin.sourceSets.named("main") {
        kotlin.srcDir project.layout.buildDirectory.get().file('generated-sources/jte')
    }
}

test {
    useJUnitPlatform()
}


